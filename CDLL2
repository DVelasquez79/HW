package datastructuresassign1;


public class CDLL {
    /*

    The CDLL only maintains a current Node & a current size. Current represents the Node where the last action takes place. For example, after the inserts above are done, the current Node will be pointing to 5 (it was the last Node inserted into the list). If we do a search for a Node containing a value of 4, then after it is found, the current Node is now pointing to Node 4.
    
     You are to complete the insert, update, delete, search and print functions of the CDLL
    */

    private Node current = null;
    private int size = 0;

    /* Insert creates a new node and puts in front of the current Node
     * The new node inserted becomes the list’s “current” Node
     */
    public void insert(int data) 
    {
        Node newNode = new Node(); // Create a new node

        //corner cases
        //1) if list is empty 

        if (size == 0) {
            // System.out.println("oops the list is empty!");
            newNode.data = data;
            current = newNode;
        }

        //2) or if it has only one element 
        else if (size == 1) { 
            newNode.data = data;
            current.previous = newNode;
            newNode.next = current;
            newNode.previous = current;
            current.next = newNode;

            current = newNode;
        }
        //general case
        else {
            newNode.data = data;
            newNode.next = current;
            newNode.previous = current.previous;
            current.previous.next = newNode;
            // before changing the value of the node, all the linkage must be done
            current.previous = newNode; // Set it infront of existing node
            current = newNode; // Set current node to new inserted node
        }


        size++; // Increment the size of the linked list with 1
    }

    /***************************** ****************************** ***************/

    /* Search starts from the current location and looks
     * for the given data value. If the Node is found, it
     * returns the Node. Otherwise, it returns null
     */
    public Node search(int data) {
        //base cases 
        //if zero elements 
        if (size == 0)
            return null;
        //if one element only 
        if (size == 1) {
            //check if the data == value
            if (current.data == data)
                return current;
            else
                return null;
        } else {
            for (int x = 0; x < size; x++) {
                if (current.data == data)
                    return current;
                current = current.next;
            }
        }
        return null;
    }

    /***************************** ****************************** ***************/

    /* Update searches for the given oldData value.
     * If the Node is found, it changes the node value to
     * newValue and returns true. Otherwise, it returns false
     * If the node is found, that node also becomes
     * the current Node
     */
    public boolean update(int oldValue, int newValue) {
        // search for oldValue
        Node temp = search(oldValue);

        if (temp == null) {
            return false;
        }
        temp.data = newValue; // if node is found, node.data=newValue, return True
        current = temp; // current = node
        return true;
    }

    /***************************** ****************************** ***************/

    /* Delete searches for the given data value.
     * If the Node is found, it removes the node
     * from the list and returns true. Otherwise, it
     * returns false. If a node is removed, the
     * next node becomes the current Node
     */

    public boolean delete(int data) {
        // search for data
        Node temp = search(data);
        //return true; // fix this
        if (temp == null)
            return false;

        // base case
        // 1) size = 1
        if (size == 0) {
            return false;
        } else if (size == 1) {
            temp = null;
            current = null;
            size--;
            return true;
        } else if (size == 2) {
            Node afterDeleted = temp.next;
            afterDeleted.next = null;
            afterDeleted.previous = null;
            temp = null;
            current = afterDeleted;
            size--;
        } else {
            Node beforeDeleted = temp.previous;
            Node afterDeleted = temp.next;
            beforeDeleted.next = afterDeleted;
            afterDeleted.previous = beforeDeleted;
            temp = null;
            current = afterDeleted;
            size--;
        }
        return true; 
    }


    /***************************** ****************************** ***************/

    /* getCurrent returns the current Node in the list
     * If the list is empty, it returns null
     */
    public Node getCurrent() {
        if (size == 0) {
            return null;
        }
        return current;
    }

    /***************************** ****************************** ***************/

    /* print displays all Nodes in order from the current
     * node in the list using the “next” node pointers
     * of each node
     */

    public void print() {
        for (int x = 0; x < size; x++) {

            System.out.println(current.data);

            current = current.next;
        }
    }

    /***************************** ****************************** ***************/

    /* print displays all Nodes in order from the current
     * node in the list using the “previous” node pointers
     * of each node
     */
    public void printReverse() {
        for (int i = 0; i < size; i++) {

            System.out.println(current.data);

            current = current.previous;
        }
    }

}
